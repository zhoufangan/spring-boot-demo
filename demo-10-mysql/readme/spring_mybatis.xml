<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/aop
	 	http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
	 	http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

    <!-- 通用配置 -->
    <!-- API特有配置 初始化大小/最大连接/最小连接 -->
    <!-- 配置获取连接等待超时的时间 -->
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.common.url}"/>
        <property name="username" value="${jdbc.common.username}"/>
        <property name="password" value="${jdbc.common.password}"/>
        <property name="initialSize" value="${jdbc.druid.api.initialSize}"/>
        <property name="maxActive" value="${jdbc.druid.api.maxActive}"/>
        <property name="minIdle" value="${jdbc.druid.api.minIdle}"/>
        <property name="maxWait" value="${jdbc.druid.maxWait}"/>
        <property name="validationQuery" value="${jdbc.druid.validationQuery}"/>
        <property name="testOnBorrow" value="${jdbc.druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${jdbc.druid.testOnReturn}"/>
        <property name="testWhileIdle" value="${jdbc.druid.testWhileIdle}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.druid.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${jdbc.druid.minEvictableIdleTimeMillis}"/>
        <property name="removeAbandoned" value="${jdbc.druid.removeAbandoned}"/>
        <property name="removeAbandonedTimeout" value="${jdbc.druid.removeAbandonedTimeout}"/>
        <property name="logAbandoned" value="${jdbc.druid.logAbandoned}"/>
        <property name="filters" value="${jdbc.druid.filters}"/>
    </bean>

    <!-- 配置sqlSessionFactory -->
    <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatisCfg.xml"/>
        <property name="mapperLocations" value="classpath:mybatis_mapper/**/*Mapper.xml"/>
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sessionFactory"/>
    </bean>

    <!-- 配置 mapper扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.zhoufa.common.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sessionFactory"/>
    </bean>

    <!-- 配置Spring的事务管理器（声明式的事务） -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 注解方式配置事物 -->
    <!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

    <!-- 拦截器方式配置事物 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>

            <tx:method name="get*" propagation="SUPPORTS"/>
            <tx:method name="query*" propagation="SUPPORTS"/>
            <tx:method name="list*" propagation="SUPPORTS"/>
            <tx:method name="select*" propagation="SUPPORTS"/>

            <tx:method name="*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com.zhoufa.common.service..*Service.*(..))"/>
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>
    </aop:config>

</beans> 